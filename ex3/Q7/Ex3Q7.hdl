/**
 *  A FSM (either Mealy or Moore) with two inputs x_t y_t and one output z. 
 *  Each input represents a digit in a base-3 number as follows: x_t y_t=00 represents zero, 
 *  x_t y_t=01 represents the digit 1, and x_t y_t=10 represents the digit 2. 
 *  The FSM prints 1 iff the base-3 number x_1 y_1…x_t y_t is divided by 4 with remainder 3. 
 *  Use JK-FF units and minimal logic.
 */

CHIP Ex3Q7 {
    IN  x,y;
    OUT z;

    PARTS:
    // Put your implementation here
    JKFF(J=y, K=y, out=Q0);
	JKFF(J=J1, K=K1, out=Q1);
	
	
	Not(in=Q0, out=NotQ0);
	Not(in=Q1, out=NotQ1);
	Not(in=x, out=NotX);
	Not(in=y, out=NotY);

    //J1
    And3(a=Q0, b=NotX, c=NotY, out=J1Part1);
    And3(a=NotQ1, b=NotQ0, c=x, out=J1Part2);
    Or(a=J1Part1 ,b=J1Part2, out=J1);

    //K1
    And3(a=Q0, b=NotX, c=NotY, out=K1Part1);
	And3(a=Q1, b=NotQ0, c=x, out=K1Part2);
	Or(a=K1Part1, b=K1Part2, out=K1);
	
	//Z
    And4(a=NotQ1, b=Q0, c=x, d=y, out=ZPart1);
	And3(a=Q1, b=NotQ0, c=y, out=ZPart2);
	And3(a=Q1, b=Q0, c=x, out=ZPart3);
	Or3(a=ZPart1, b=ZPart2, c=ZPart3, out=z);
}